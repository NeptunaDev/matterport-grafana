services:
  client:
    build: ./client
    container_name: client
    restart: unless-stopped
    volumes:
      - './client:/app'
      - '/app/node_modules'
    ports:
      # - '80:4173'
      - '80:5173'
    depends_on:
      - api
    env_file:
      - ./client/.env
    networks:
      - grafana_network

  api:
    build: ./api
    container_name: api
    restart: unless-stopped
    ports:
      - '8000:8000'
    depends_on:
      - mongo
    env_file:
      - ./api/.env
    networks:
      - grafana_network

  grafana:
    build: ./grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - TERM=linux
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-polystat-panel,grafana-mongodb-datasource
    ports:
      - '3000:3000'
    volumes:
      - 'grafana_storage:/var/lib/grafana'
    depends_on:
      - mongo
    networks:
      - grafana_network

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - '27017:27017'
    volumes:
      - 'mongo_data:/data/db'
    networks:
      - grafana_network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: example
    ports:
      - '8081:8081'
    depends_on:
      - mongo
    networks:
      - grafana_network

volumes:
  grafana_storage: {}
  mongo_data: {}

networks:
  grafana_network:
